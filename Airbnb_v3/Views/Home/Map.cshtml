@{
    ViewData["Title"] = "Map";
}


<h2>Map</h2>



<div class='sidebar'>
    <div class='heading'>
        <h1>Our locations</h1>
    </div>
    <div id='listings' class='listings'></div>
</div>
<form>
    <div class="form-row">
        <div class="col-lg-3 form-group">
            <label>Wijk</label>
            <select id="selectNeighbourhood" name="NeighbourhoodFilter" class="form-control">

            </select>
        </div>
        <div class="col-lg-3">
            <label>Zoekterm</label>
            <input type="text" class="form-control" />
        </div>
        <div class="col-lg-3">
            <label>Prijs van:</label>
            <input type="number" class="form-control" min="50" max="99998" />
            <label>tot:</label>
            <input type="number" class="form-control" min="51" max="99999" />
        </div>
        <div class="col-lg-3">
            <label>Beoordeling van:</label>
            <input type="number" class="form-control" min="1" max="5" />
            <label>tot:</label>
            <input type="number" class="form-control" min="1" max="5" />
        </div>
    </div>
    <div class="form-row"><input type="button" value="Zoeken" asp-controller="ListingsController" asp-action="GetListingsWithFilter" asp-route-id="selectNeighbourhood.Value" class="form-control btn-primary" /></div>
</form>
@*<div id='map' class='map pad2'>Map</div>*@


<p><div id='map' style='width: 800px; height: 600px;'></div></p>
<style>
    /*body {
        color: #404040;
        font: 400 15px/22px 'Source Sans Pro', 'Helvetica Neue', Sans-serif;
        margin: 0;
        padding: 0;
        -webkit-font-smoothing: antialiased;

    }           
    * {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

    h1 {
  font-size: 22px;
  margin: 0;
  font-weight: 400;
  line-height: 20px;
  padding: 20px 2px;
}

    a {
  color: #404040;
  text-decoration: none;
}

a:hover {
  color: #101010;
}

        /* The page is split between map and sidebar - the sidebar gets 1/3, map
    gets 2/3 of the page. You can adjust this to your personal liking. */
        /*.sidebar {
  position: absolute;
  width: 33.3333%;
  height: 100%;
  top: 0;
  left: 0;
  overflow: hidden;
  border-right: 1px solid rgba(0, 0, 0, 0.25);
}*/
        /*.heading {
  background: #fff;
  border-bottom: 1px solid #eee;
  height: 60px;
  line-height: 60px;
  padding: 0 10px;
}*/


        /*.map {
            border-left: 1px solid #fff;
            position: absolute;
            left: 33.3333%;
            width: 66.6666%;
            top: 0;
            bottom: 0;
        }*/

        /*.pad2 {
            padding: 20px;
            -webkit-box-sizing: border-box;
            -moz-box-sizing: border-box;
            box-sizing: border-box;
        }*/*/


        .pin {
            width: 20px;
            height: 20px;
            border-radius: 50% 50% 50% 0;
            background: #89849b;
            -webkit-animation-name: bounce;
            -moz-animation-name: bounce;
            -o-animation-name: bounce;
            -ms-animation-name: bounce;
            animation-name: bounce;
            -webkit-animation-fill-mode: both;
            -moz-animation-fill-mode: both;
            -o-animation-fill-mode: both;
            -ms-animation-fill-mode: both;
            animation-fill-mode: both;
            -webkit-animation-duration: 1s;
            -moz-animation-duration: 1s;
            -o-animation-duration: 1s;
            -ms-animation-duration: 1s;
            animation-duration: 1s;
        }

            .pin:after {
                content: '';
                width: 10px;
                height: 10px;
                margin: 6px 0 0 6px;
                background: #2f2f2f;
                position: absolute;
                border-radius: 50%;
            }


        .marker {
            width: 14px;
            height: 14px;
            border-radius: 50% 50% 50% 0;
            background: #2F2F2F;
            transform: rotate(-45deg);
            animation-name: bounce;
            animation-fill-mode: both;
            animation-duration: 1s;
        }


        .mapboxgl-popup {
            max-width: 200px;
        }

        .mapboxgl-popup-content {
            text-align: center;
            font-family: 'Open Sans', sans-serif;
        }

        /*.listings {
  height: 100%;
  overflow: auto;
  padding-bottom: 60px;
}

.listings .item {
  display: block;
  border-bottom: 1px solid #eee;
  padding: 10px;
  text-decoration: none;
}

.listings .item:last-child { border-bottom: none; }

.listings .item .title {
  display: block;
  color: #00853e;
  font-weight: 700;
}

.listings .item .title small { font-weight: 400; }

.listings .item.active .title,
.listings .item .title:hover { color: #8cc63f; }

.listings .item.active {
  background-color: #f8f8f8;
}

::-webkit-scrollbar {
  width: 3px;
  height: 3px;
  border-left: 0;
  background: rgba(0, 0, 0, 0.1);
}

::-webkit-scrollbar-track {
  background: none;
}

::-webkit-scrollbar-thumb {
  background: #00853e;
  border-radius: 0;
}

.clearfix { display: block; }

.clearfix::after {
  content: '.';
  display: block;
  height: 0;
  clear: both;
  visibility: hidden;
}*/
</style>

<script>
    mapboxgl.accessToken = 'pk.eyJ1IjoiYm92ZW5rYW1wYiIsImEiOiJjamc2OWkyN24xcmxnMzNtbzY1ZmlpMXk5In0.wZO5EUCXogq6QJS7p_xUUg';
    var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/bovenkampb/cjh911gie1leh2rlo81r9bs4x',
        center: [4.9, 52.36], // starting position [lng, lat]
        zoom: 11 // starting zoom
    });

    
    map.addControl(new mapboxgl.NavigationControl());
  


    fetch('http://localhost:9001/Listings/GetListings')
        .then((resp) => resp.json())
        .then(function (data) {
            var geojson = { features: [] }

            for (var i = 0; i < data.length; i++) {
                var longtitudestring = String(data[i].longitude);
                longtitudestring = longtitudestring.replace(".", "");
                var longtitudefloat = parseFloat([longtitudestring.slice(0, 1) + "." + longtitudestring.slice(1)].join(''));

                var latitudestring = String(data[i].latitude);
                latitudestring = latitudestring.replace(".", "");
                var latitudefloat = parseFloat([latitudestring.slice(0, 2) + "." + latitudestring.slice(2)].join(''));

                var currentGeo = {
                    type: 'Feature',
                    geometry: {
                        type: 'Point',

                        coordinates: [longtitudefloat, latitudefloat]
                    },
                    properties: {
                        name: data[i].name,
                        id: data[i].id,
                        thumbnailurl: data[i].thumbnailurl
                    }
                }

                geojson.features.push(currentGeo);


                //var geojson = {
                //    features: [{
                //        type: 'Feature',
                //        geometry: {
                //            type: 'Point',

                //            coordinates: [longtitudefloat, latitudefloat]
                //        },
                //        properties: {
                //            name: data[i].name,
                //            id: data[i].id,
                //            thumbnailurl: data[i].thumbnailurl,
                //            price: data[i].price
                //        }
                //    }]
                //};

                //geojson.features.forEach(function (marker) {

                //    // create a HTML element for each feature
                //    var el = document.createElement('div');
                //    el.className = 'pin';

                //    // make a marker for each feature and add to the map
                //    new mapboxgl.Marker(el)
                //        .setLngLat(marker.geometry.coordinates)
                //        .setPopup(new mapboxgl.Popup({ offset: 25 }) // add popups
                //            .setHTML('<h3>' + marker.properties.name + '</h3> <br/> <img src="' + marker.properties.thumbnailurl + '" alt="Thumbnail" height="144" width="216" /> <p>' + marker.properties.price + '</p><p> <a href="http://localhost:9001/Listings/Details/ ' + marker.properties.id + '">Toon meer details</a></p>'))
                //        .addTo(map);
                    
                //});

                  

            }

            loadGeoJSON(geojson);
        });

    function loadGeoJSON(geojson) {
    map.addSource("geolistings", {
        type: "geojson",
        data: geojson,
        cluster: true,
        clusterMaxZoom: 14,
        clusterRadius: 50
    });

    map.addLayer({
        id: "clusters",
        type: "circle",
        source: "geolistings",
        filter: ["has", "point_count"],
        paint: {
            "circle-color": [
                "step",
                ["get", "point_count"],
                "#ffb1a0",
                100,
                "#ff8970",
                750,
                "#ff5c3a"
            ],
            "circle-radius": [
                "step",
                ["get", "point_count"],
                20,
                100,
                30,
                750,
                40
            ]
        }
    });

    map.addLayer({
        id: "cluster-count",
        type: "symbol",
        source: "geolistings",
        filter: ["has", "point_count"],
        layout: {
            "text-field": "{point_count_abbreviated}",
            "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
            "text-size": 12
        }
    });

    map.addLayer({
        id: "unclustered-point",
        type: "circle",
        source: "geolistings",
        filter: ["!has", "point_count"],
        paint: {
            "circle-color": "#ff0000",
            "circle-radius": 5,
            "circle-stroke-width": 1,
            "circle-stroke-color": "#fff"
        }
    });
}

    fetch('http://localhost:9001/Neighbourhoods/GetNeighbourhoods')
        .then((resp) => resp.json())
        .then(function (data) {
            for (var i = 0; i < data.length; i++) {
                console.log(data[i].neighbourhood);

                var para = document.createElement("option");
                para.setAttribute("Value", data[i].neighbourhood);
                var node = document.createTextNode(data[i].neighbourhood);
                para.appendChild(node);

                var element = document.getElementById("selectNeighbourhood");
                element.appendChild(para);


            }
        });

//    function buildLocationList(data) {
//  // Iterate through the list of listings
//  for (i = 0; i < data.features.length; i++) {
//    var currentFeature = data.features[i];
//    // Shorten data.feature.properties to just `prop` so we're not
//    // writing this long form over and over again.
//    var prop = currentFeature.properties;
//    // Select the listing container in the HTML and append a div
//    // with the class 'item' for each store
//    var listings = document.getElementById('listings');
//    var listing = listings.appendChild(document.createElement('div'));
//    listing.className = 'item';
//    listing.id = 'listing-' + i;

//    // Create a new link with the class 'title' for each store
//    // and fill it with the store address
//    var link = listing.appendChild(document.createElement('a'));
//    link.href = '#';
//    link.className = 'title';
//    link.dataPosition = i;
//    link.innerHTML = prop.address;

//    // Create a new div with the class 'details' for each store
//    // and fill it with the city and phone number
//    var details = listing.appendChild(document.createElement('div'));
//    details.innerHTML = prop.city;
//    if (prop.phone) {
//      details.innerHTML += ' &middot; ' + prop.phoneFormatted;
//    }
//  }
//}

</script>