@*@model IEnumerable<Airbnb_v3.Models.Listings>

@{
    ViewData["Title"] = "Index";
}

<h2>Index</h2>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
                <th>
                    @Html.DisplayNameFor(model => model.ListingUrl)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ScrapeId)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.LastScraped)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Summary)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Space)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Description)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ExperiencesOffered)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.NeighborhoodOverview)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Notes)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Transit)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Access)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Interaction)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.HouseRules)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ThumbnailUrl)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.MediumUrl)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.PictureUrl)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.XlPictureUrl)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.HostId)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.HostUrl)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.HostName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.HostSince)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.HostLocation)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.HostAbout)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.HostResponseTime)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.HostResponseRate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.HostAcceptanceRate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.HostIsSuperhost)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.HostThumbnailUrl)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.HostPictureUrl)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.HostNeighbourhood)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.HostListingsCount)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.HostTotalListingsCount)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.HostVerifications)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.HostHasProfilePic)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.HostIdentityVerified)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Street)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Neighbourhood)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.NeighbourhoodCleansed)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.NeighbourhoodGroupCleansed)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.City)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.State)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Zipcode)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Market)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.SmartLocation)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CountryCode)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Country)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Latitude)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Longitude)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.IsLocationExact)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.PropertyType)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.RoomType)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Accommodates)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Bathrooms)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Bedrooms)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Beds)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.BedType)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Amenities)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.SquareFeet)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Price)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.WeeklyPrice)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.MonthlyPrice)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.SecurityDeposit)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CleaningFee)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.GuestsIncluded)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ExtraPeople)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.MinimumNights)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.MaximumNights)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CalendarUpdated)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.HasAvailability)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Availability30)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Availability60)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Availability90)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Availability365)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CalendarLastScraped)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.NumberOfReviews)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstReview)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.LastReview)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ReviewScoresRating)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ReviewScoresAccuracy)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ReviewScoresCleanliness)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ReviewScoresCheckin)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ReviewScoresCommunication)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ReviewScoresLocation)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ReviewScoresValue)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.RequiresLicense)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.License)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.JurisdictionNames)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.InstantBookable)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.IsBusinessTravelReady)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CancellationPolicy)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.RequireGuestProfilePicture)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.RequireGuestPhoneVerification)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CalculatedHostListingsCount)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ReviewsPerMonth)
                </th>
            <th>
                @Html.DisplayNameFor(model => model.IdNavigation)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.ListingUrl)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ScrapeId)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastScraped)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Summary)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Space)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ExperiencesOffered)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.NeighborhoodOverview)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Notes)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Transit)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Access)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Interaction)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HouseRules)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ThumbnailUrl)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.MediumUrl)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PictureUrl)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.XlPictureUrl)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HostId)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HostUrl)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HostName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HostSince)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HostLocation)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HostAbout)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HostResponseTime)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HostResponseRate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HostAcceptanceRate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HostIsSuperhost)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HostThumbnailUrl)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HostPictureUrl)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HostNeighbourhood)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HostListingsCount)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HostTotalListingsCount)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HostVerifications)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HostHasProfilePic)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HostIdentityVerified)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Street)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Neighbourhood)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.NeighbourhoodCleansed)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.NeighbourhoodGroupCleansed)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.City)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.State)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Zipcode)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Market)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SmartLocation)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CountryCode)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Country)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Latitude)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Longitude)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.IsLocationExact)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PropertyType)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.RoomType)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Accommodates)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Bathrooms)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Bedrooms)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Beds)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.BedType)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Amenities)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SquareFeet)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.WeeklyPrice)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.MonthlyPrice)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SecurityDeposit)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CleaningFee)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.GuestsIncluded)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ExtraPeople)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.MinimumNights)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.MaximumNights)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CalendarUpdated)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HasAvailability)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Availability30)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Availability60)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Availability90)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Availability365)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CalendarLastScraped)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.NumberOfReviews)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FirstReview)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastReview)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReviewScoresRating)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReviewScoresAccuracy)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReviewScoresCleanliness)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReviewScoresCheckin)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReviewScoresCommunication)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReviewScoresLocation)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReviewScoresValue)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.RequiresLicense)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.License)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.JurisdictionNames)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.InstantBookable)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.IsBusinessTravelReady)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CancellationPolicy)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.RequireGuestProfilePicture)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.RequireGuestPhoneVerification)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CalculatedHostListingsCount)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReviewsPerMonth)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.IdNavigation.Access)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>*@


@using Airbnb_v3.ViewModels;

@{
    ViewData["Title"] = "Map";
    @model ListingsViewModel;
        int minPrice = 0;
        int maxPrice = 0;
        int minRating = 0;
        if (Model.filters != null)
        {
            minPrice = Model.filters.MinPrice;
            maxPrice = Model.filters.MaxPrice;
            minRating = Model.filters.MinRating;
        }
}


<h2>Map</h2>

<div id="filters">
    <form asp-controller="Listings" asp-action="Filter" method="post">
        <label asp-for="filters.Neighbourhood"></label>
        @Html.DropDownListFor(model => model.filters.Neighbourhood, new SelectList(
        Model.neighbourhoods,
        "Neighbourhood",
        "Neighbourhood",
        0), "-- Please select --")

        <label asp-for="filters.MinPrice">Minimum price per night:</label>

        <input asp-for="filters.MinPrice" type="number" name="filters.MinPrice" value="@minPrice" />


        <label asp-for="filters.MaxPrice">Maximum price per night:</label>
        <input asp-for="filters.MaxPrice" type="number" name="filters.MaxPrice" value="@maxPrice" />
        <br />
        <label asp-for="filters.MinRating">Minimum rating:</label>
        <br />
        <input asp-for="filters.MinRating" type="number" name="filters.MinRating" value="@minRating" />
        <br />
        <input type="submit" value="Filter" />
    </form>
    @{
    if (Model.filters != null)
    {
    <p>Filtered on:</p>
            if (Model.filters.Neighbourhood != null)
            {
    <p>Neighbourhood: @Model.filters.Neighbourhood</p>
    }
    if (Model.filters.MinPrice > 0)
    {
    <p>Minimum price: @Model.filters.MinPrice</p>
    }

    if (Model.filters.MaxPrice > 0)
    {
    <p>Maximum price: @Model.filters.MaxPrice</p>
    }


    if (Model.filters.MinRating > 0)
    {
    <p>Minimum Rating: @Model.filters.MinRating</p>
    }
    <form asp-controller="Listings" asp-action="ClearFilter" method="get">
        <input type="submit" value="ClearFilters" />
    </form>
    }
    }
</div>
@*Oude filter form*@
@*<div class='sidebar'>
        <div class='heading'>
            <h1>Our locations</h1>
        </div>
        <div id='listings' class='listings'></div>
    </div>
    <form asp-controller="Listings" asp-action="Filter" method="post">
        <div class="form-row">
            <div class="col-lg-3 form-group">
                <label>Wijk</label>
                <select id="selectNeighbourhood" name="NeighbourhoodFilter" class="form-control"></select>
            </div>
            <div class="col-lg-3">
                <label>Zoekterm</label>
                <input type="text" class="form-control" />
            </div>
            <div class="col-lg-3">
                <label>Prijs van:</label>
                <input type="number" class="form-control" min="50" max="99998" />
                <label>tot:</label>
                <input type="number" class="form-control" min="51" max="99999" />
            </div>
            <div class="col-lg-3">
                <label>Beoordeling van:</label>
                <input type="number" class="form-control" min="1" max="5" />
                <label>tot:</label>
                <input type="number" class="form-control" min="1" max="5" />
            </div>
        </div>
        <div class="form-row"><input type="button" value="Zoeken" asp-controller="ListingsController" asp-action="GetListingsWithFilter" asp-route-id="selectNeighbourhood.Value" class="form-control btn-primary" /></div>
    </form>*@


<p><div id='map' style='width: 800px; height: 600px;'></div></p>
<style>
    /*body {
            color: #404040;
            font: 400 15px/22px 'Source Sans Pro', 'Helvetica Neue', Sans-serif;
            margin: 0;
            padding: 0;
            -webkit-font-smoothing: antialiased;

        }
        * {
      -webkit-box-sizing: border-box;
      -moz-box-sizing: border-box;
      box-sizing: border-box;
    }

        h1 {
      font-size: 22px;
      margin: 0;
      font-weight: 400;
      line-height: 20px;
      padding: 20px 2px;
    }

        a {
      color: #404040;
      text-decoration: none;
    }

    a:hover {
      color: #101010;
    }

            /* The page is split between map and sidebar - the sidebar gets 1/3, map
        gets 2/3 of the page. You can adjust this to your personal liking. */
    /*.sidebar {
      position: absolute;
      width: 33.3333%;
      height: 100%;
      top: 0;
      left: 0;
      overflow: hidden;
      border-right: 1px solid rgba(0, 0, 0, 0.25);
    }*/
    /*.heading {
      background: #fff;
      border-bottom: 1px solid #eee;
      height: 60px;
      line-height: 60px;
      padding: 0 10px;
    }*/


    /*.map {
                border-left: 1px solid #fff;
                position: absolute;
                left: 33.3333%;
                width: 66.6666%;
                top: 0;
                bottom: 0;
            }*/

    /*.pad2 {
                padding: 20px;
                -webkit-box-sizing: border-box;
                -moz-box-sizing: border-box;
                box-sizing: border-box;
            }*/ */


    .pin {
        width: 20px;
        height: 20px;
        border-radius: 50% 50% 50% 0;
        background: #89849b;
        -webkit-animation-name: bounce;
        -moz-animation-name: bounce;
        -o-animation-name: bounce;
        -ms-animation-name: bounce;
        animation-name: bounce;
        -webkit-animation-fill-mode: both;
        -moz-animation-fill-mode: both;
        -o-animation-fill-mode: both;
        -ms-animation-fill-mode: both;
        animation-fill-mode: both;
        -webkit-animation-duration: 1s;
        -moz-animation-duration: 1s;
        -o-animation-duration: 1s;
        -ms-animation-duration: 1s;
        animation-duration: 1s;
    }

    .pin:after {
        content: '';
        width: 10px;
        height: 10px;
        margin: 6px 0 0 6px;
        background: #2f2f2f;
        position: absolute;
        border-radius: 50%;
    }


    .marker {
        width: 14px;
        height: 14px;
        border-radius: 50% 50% 50% 0;
        background: #2F2F2F;
        transform: rotate(-45deg);
        animation-name: bounce;
        animation-fill-mode: both;
        animation-duration: 1s;
    }


    .mapboxgl-popup {
        max-width: 200px;
    }

    .mapboxgl-popup-content {
        text-align: center;
        font-family: 'Open Sans', sans-serif;
    }

    /*.listings {
      height: 100%;
      overflow: auto;
      padding-bottom: 60px;
    }

    .listings .item {
      display: block;
      border-bottom: 1px solid #eee;
      padding: 10px;
      text-decoration: none;
    }

    .listings .item:last-child { border-bottom: none; }

    .listings .item .title {
      display: block;
      color: #00853e;
      font-weight: 700;
    }

    .listings .item .title small { font-weight: 400; }

    .listings .item.active .title,
    .listings .item .title:hover { color: #8cc63f; }

    .listings .item.active {
      background-color: #f8f8f8;
    }

    ::-webkit-scrollbar {
      width: 3px;
      height: 3px;
      border-left: 0;
      background: rgba(0, 0, 0, 0.1);
    }

    ::-webkit-scrollbar-track {
      background: none;
    }

    ::-webkit-scrollbar-thumb {
      background: #00853e;
      border-radius: 0;
    }

    .clearfix { display: block; }

    .clearfix::after {
      content: '.';
      display: block;
      height: 0;
      clear: both;
      visibility: hidden;
    }*/
</style>

<script>
    mapboxgl.accessToken = 'pk.eyJ1IjoiYm92ZW5rYW1wYiIsImEiOiJjamc2OWkyN24xcmxnMzNtbzY1ZmlpMXk5In0.wZO5EUCXogq6QJS7p_xUUg';
    var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/bovenkampb/cjh911gie1leh2rlo81r9bs4x',
        center: [4.9, 52.36], // starting position [lng, lat]
        zoom: 11 // starting zoom
    });


    map.addControl(new mapboxgl.NavigationControl());



    fetch('http://localhost:9001/Listings/GetListings')
        .then((resp) => resp.json())
        .then(function (data) {
            var geojson = { features: [] }

            for (var i = 0; i < data.length; i++) {
                var longtitudestring = String(data[i].longitude);
                longtitudestring = longtitudestring.replace(".", "");
                var longtitudefloat = parseFloat([longtitudestring.slice(0, 1) + "." + longtitudestring.slice(1)].join(''));

                var latitudestring = String(data[i].latitude);
                latitudestring = latitudestring.replace(".", "");
                var latitudefloat = parseFloat([latitudestring.slice(0, 2) + "." + latitudestring.slice(2)].join(''));

                var currentGeo = {
                    type: 'Feature',
                    geometry: {
                        type: 'Point',

                        coordinates: [longtitudefloat, latitudefloat]
                    },
                    properties: {
                        name: data[i].name,
                        id: data[i].id,
                        thumbnailurl: data[i].thumbnailurl,
                        price: data[i].price,
                        description: data[i].description,
                        neighbourhood: data[i].neighbourhood,
                        reviewscoresrating: data[i].reviewscoresrating
                    }
                }

                geojson.features.push(currentGeo);
            }

            loadGeoJSON(geojson);
        });

    function loadGeoJSON(geojson) {
        map.addSource("geolistings", {
            type: "geojson",
            data: geojson,
            cluster: true,
            clusterMaxZoom: 14,
            clusterRadius: 50
        });

        map.addLayer({
            id: "clusters",
            type: "circle",
            source: "geolistings",
            filter: ["has", "point_count"],
            paint: {
                "circle-color": [
                    "step",
                    ["get", "point_count"],
                    "#ffb1a0",
                    100,
                    "#ff8970",
                    750,
                    "#ff5c3a"
                ],
                "circle-radius": [
                    "step",
                    ["get", "point_count"],
                    20,
                    100,
                    30,
                    750,
                    40
                ]
            }
        });

        map.addLayer({
            id: "cluster-count",
            type: "symbol",
            source: "geolistings",
            filter: ["has", "point_count"],
            layout: {
                "text-field": "{point_count_abbreviated}",
                "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
                "text-size": 12
            }
        });

        map.addLayer({
            id: "unclustered-point",
            type: "circle",
            source: "geolistings",
            filter: ["!has", "point_count"],
            paint: {
                "circle-color": "#ff0000",
                "circle-radius": 5,
                "circle-stroke-width": 1,
                "circle-stroke-color": "#fff"
            }
        });

        // When a click event occurs on a feature in the places layer, open a popup at the
        // location of the feature, with description HTML from its properties.
        map.on('click', 'unclustered-point', function (e) {
            var coordinates = e.features[0].geometry.coordinates.slice();
            var description = e.features[0].properties.description;

            // Ensure that if the map is zoomed out such that multiple
            // copies of the feature are visible, the popup appears
            // over the copy being pointed to.
            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
            }

            new mapboxgl.Popup()
                .setLngLat(coordinates)
                .setHTML('<h3>' + e.features[0].properties.name + '</h3> <br/> <img src=\"' + e.features[0].properties.thumbnailurl + '\" alt="Thumbnail" height="144" width="216" /> <p>' + e.features[0].properties.price + '</p><p> <a href="http://localhost:9001/Listings/Details/ ' + e.features[0].properties.id + '">Toon meer details</a></p>')
                .addTo(map);
        });
    }

    fetch('http://localhost:9001/Neighbourhoods/GetNeighbourhoods')
        .then((resp) => resp.json())
        .then(function (data) {
            for (var i = 0; i < data.length; i++) {
                console.log(data[i].neighbourhood);

                var para = document.createElement("option");
                para.setAttribute("Value", data[i].neighbourhood);
                var node = document.createTextNode(data[i].neighbourhood);
                para.appendChild(node);

                var element = document.getElementById("selectNeighbourhood");
                element.appendChild(para);


            }
        });

//    function buildLocationList(data) {
//  // Iterate through the list of listings
//  for (i = 0; i < data.features.length; i++) {
//    var currentFeature = data.features[i];
//    // Shorten data.feature.properties to just `prop` so we're not
//    // writing this long form over and over again.
//    var prop = currentFeature.properties;
//    // Select the listing container in the HTML and append a div
//    // with the class 'item' for each store
//    var listings = document.getElementById('listings');
//    var listing = listings.appendChild(document.createElement('div'));
//    listing.className = 'item';
//    listing.id = 'listing-' + i;

//    // Create a new link with the class 'title' for each store
//    // and fill it with the store address
//    var link = listing.appendChild(document.createElement('a'));
//    link.href = '#';
//    link.className = 'title';
//    link.dataPosition = i;
//    link.innerHTML = prop.address;

//    // Create a new div with the class 'details' for each store
//    // and fill it with the city and phone number
//    var details = listing.appendChild(document.createElement('div'));
//    details.innerHTML = prop.city;
//    if (prop.phone) {
//      details.innerHTML += ' &middot; ' + prop.phoneFormatted;
//    }
//  }
//}

</script>